@startuml
skinparam dpi 150

participant "Main Program Thread" as main_thread
participant "Node Thread" as node_thread
participant "Thread Pool" as thread_pool
participant "Temporary Thread" as temp_thread

main_thread->main_thread: Create Node instance

create node_thread
main_thread->node_thread: Initialize Node (Node.init)

activate node_thread
node_thread->node_thread: Begin Node discovery
activate node_thread
node_thread->node_thread: Node discovery complete
deactivate node_thread

create thread_pool
node_thread->thread_pool: Create handler thread pool
thread_pool->thread_pool: Wait for work (message)
activate thread_pool

node_thread-->main_thread: Node Init complete

group while not(node_shutdown)
	node_thread->node_thread: Listen for requests
	activate node_thread
	]-->node_thread: Message from external node
	node_thread->node_thread: Message received
	deactivate node_thread
	
	alt thread available
		node_thread-->thread_pool: Message
		activate thread_pool
		thread_pool->thread_pool: Perform PBFT exchange
		hnote over thread_pool: Delay for PBFT
		thread_pool->thread_pool: Commit result to local table
		thread_pool-->node_thread: Result
		deactivate thread_pool
		
	else all threads busy
		create temp_thread
		node_thread->temp_thread: Spawn new handler thread
		activate temp_thread
		node_thread-->temp_thread: Message
		temp_thread->temp_thread: Perform PBFT exchange
		hnote over temp_thread: Delay for PBFT
		alt Message Authentic
			temp_thread->temp_thread: Commit value to local table
		else Illegitimate Message
			temp_thread->temp_thread: Reject value
		end
		temp_thread-->node_thread: Result
		destroy temp_thread
	end
	
end

main_thread->node_thread: Shutdown Node
node_thread->thread_pool: Shutdown threads
destroy thread_pool
node_thread->main_thread: Shutdown complete
destroy node_thread

@enduml